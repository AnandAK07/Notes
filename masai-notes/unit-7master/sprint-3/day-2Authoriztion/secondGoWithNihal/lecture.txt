Optimisations/corrections : 

1. Client sending a token

    - Client will send in the headers and we'll take it out from there
    - In this  format : 
                `Authorisation : Bearer {token}`


2. Making Authentication middleware
    
    - all the logic for Authentication will be in this middleware;
    - we can use this middleware for the specific protected endpoints that we want to;

    Btw, we can use a mmiddleware for a specific API endpoint, by writing it this way : 

    app.get("/reports", middleware, (req, res) => {
    return res.send({msg : "here are the reports"})
})


3. Storing passwords in the database, the right way;

  Right now, what we are doing is storing the password in the database in plaintext

  We shouldn't be doing that.

  We should be storing it in undreadable format;


  Encryption : 
        plaintext -----> encryption_algo/logic/key --------> encrypted text
        cup -----> encryption_algo/logic/key ------> dvq


        encrypted text ----> decryption_algo/logic/key ---> plaintext
        lfz           -----> decryption_algo/logic/key ----> key

  Is Encryption a reversible process?  --> Yes
  All we need to know the Encryption key;


  Hashing : 

        plain text ------> Hashing_algo (SHA1) -----> hash
        cup        -----> SHA1 -----> igh
        key       ------> SHA -----> alsdf
        cup        ------> SHA1 ----> igh

 
        Hashing is not reversible;



 We'll hash the passwords before storing it in the DB;

 


 **AUTHORISATION**

 It's a process of identifying(as well as enforcing?) what access does the user have;

Example : LMS

- Based on the role of the user, we control the access;
- For example, in the LMS, students can just view lectures
- whereas, the instructors can edit/delete/create lectures

 **Role Based Access Control**
 (RBAC)

 Steps : 
 1. Have a role for each user;
 2. Define what roles should have what access;
 3. Determine the role and give access accordingly;



Roles - students, instructors, admin

a. students - should be able to view lectures;
b. instructors - should be able to view lectures as well as reviews;



Explanation 

1. While creating a token when a user logs in, we can add whatever we want as a "payload" in the token
     {foo : "bar"} or {org : "masai"} etc;

2. Instead of adding irrelevant things like above, we strategically add 
        {userID : user._id} in the token;

3. In Authentication mdidleware, when we do jwt.verify it gives us decoded value in the callback if the token is correct.


4. In the decoded object, we'll have the things that we added while creating token - refer point 2;
        {userID : user._id}


5. from the userID, can we get more information about the user?
        const user = UserMOdel.find({_id : userID})

6. can we get the user's role?
        const role = user.role;

7. A middleware has access to the request object - yes;

8. A middleware can modify the request object - yes;
        req.userrole = role


9. After going through the middleware, whichever API endpoint, the request will come to;
    that req.userrole will have the role of the user;

10. Now, based on that role, decide what response you want to send;
